static const struct file_operations llkd_misc_fops = {
    .open = open_miscdrv,
    .read = read_miscdrv,
    .write = write_miscdrv,
    .release = close_miscdrv
};

static struct miscdevice llkd_miscdev = {
    .minor = MISC_DYNAMIC_MINOR, /* kernel dynamically assigns a free minor# */
    .name = "llkd_miscdrv",      /* “auto-create a device file as /dev/llkd_miscdrv” */
    .mode = 0666,                /* ... dev node perms set as specified here */
    .fops = &llkd_misc_fops,     /* connect to this driver's 'functionality' */
};

static int __init miscdrv_init(void) {
    int ret;
    struct device *dev;
    ret = misc_register(&llkd_miscdev);
    if (ret != 0) {
        pr_notice("misc device registration failed, aborting\n");
        return ret;
    }
    ...
}

---
// print device info (RECOMMENDED to use dev_* functions
struct device *dev = llkd_miscdev.this_device;
dev_info(dev, "sample dev_info(): minor# = %d\n", llkd_miscdev.minor));
---

--- copy data to/from userspace ---
// might sleep - never call in acomic/interrupt context!
#include <linux/uaccess.h>   /* Note! used to be <asm/uaccess.h> upto 4.11 */
unsigned long copy_to_user(void __user *to, const void *from, unsigned long n);
unsigned long copy_from_user(void *to, const void __user *from, unsigned long n);
---
